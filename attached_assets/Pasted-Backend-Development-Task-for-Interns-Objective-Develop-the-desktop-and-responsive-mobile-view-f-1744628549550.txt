Backend Development Task for Interns
Objective:
Develop the desktop and responsive (mobile view) functionality for the eCommerce web design template provided in the Figma file: Ecommerce Web Design. This task focuses on backend development while integrating the design template with dynamic and responsive capabilities.

Tasks Overview:
Each week is structured to guide interns through backend development, integrating frontend designs with dynamic content, and ensuring a fully responsive layout.

Week 1: Project Setup and Static Backend Integration
Goal: Set up the project environment and create static endpoints to serve the frontend templates.
Tasks:
Set up the backend server using Node.js and Express.js.
Organize the project directory with folders for routes, views, public (CSS/JS), and assets.
Create static HTML/CSS files for:
Home Page
Product Listing Page
Product Details Page
Serve these static pages through Express routes (/, /products, /products/:id).
Ensure mobile responsiveness of all pages using media queries in the provided CSS files.
Deliverables:
Functional Node.js server with routes serving static pages.
Desktop and mobile view consistency using responsive design techniques.
Push code to a GitHub repository.

Week 2: Database Integration and Dynamic Content
Goal: Connect to a database and render dynamic content on the frontend.
Tasks:
Set up a MongoDB database (or Firebase Realtime Database if preferred).
Create a collection for Products with attributes like id, name, price, category, image, description, and stock.
Populate the database with sample product data.
Use EJS (or another templating engine) to dynamically render:
Home Page: Display featured products from the database.
Product Listing Page: Fetch and display all products from the database in a grid layout.
Product Details Page: Fetch and display detailed information for a single product.
Implement a search bar (functional, server-side) to filter products by name or category.
Deliverables:
Fully integrated backend with dynamic data rendering.
Responsive design for all pages (desktop and mobile).
Code committed to GitHub repository.

Week 3: Backend Features and Final Integration
Goal: Add backend features and finalize the project for deployment.
Tasks:
Implement user authentication using JWT or Firebase Auth.
Create login and signup pages.
Restrict access to certain pages (e.g., adding products, admin actions).
Add a feature to add products using a form and save them to the database.
Implement pagination for the Product Listing Page to handle large datasets.
Deploy the project to a platform like Render, Heroku, or Vercel.
Deliverables:
Authentication system implemented and tested.
Pagination and add product functionality working as expected.
Deployed project with live URL.
Final code uploaded to the GitHub repository.

Tools and Technologies:
Node.js and Express.js for backend development.
MongoDB (or Firebase) for the database.
EJS (or any templating engine) for dynamic content rendering.
HTML5/CSS3/JavaScript for frontend integration.
